{"version":3,"sources":["scripts/main.js"],"names":["FIELD_ROW_CLASS","FIELD_CELL_CLASS","FIELD_SIZE","WIN_SCORE","BaseClass","setSelectors","fieldRows","document","getElementsByClassName","buttonStart","querySelector","gameScore","loseMessage","winMessage","startMessage","score","isGameOver","isGameStart","fields","Array","fill","map","classList","contains","add","textContent","remove","setRandomNumbers","addKeydownListener","setInitData","removeKeydownListener","forEach","row","rowIndex","cell","cellIndex","cells","className","gameIsContinue","filter","some","isSameNextCell","nextRow","isSameCellNextRow","length","freeRows","checkIfGameIsContinue","Math","floor","random","getRandomIndex","cellValue","newValue","ceil","getRandomIndexes","Move","isCellMoved","prevCellIndex","value","columnIndex","prevColumnIndex","index","prevCell","setNewRowValues","setPrevRowValues","setNewColumnValues","setPrevColumnValues","Game","handleButtonClick","bind","handleKeydown","addEventListener","key","goDown","goLeft","goUp","goRight","updateCells","updateScore","checkIfGameIsOver","removeEventListener","restartGame","startGame","newGame","init"],"mappings":"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","file":"main.036349ff.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst FIELD_ROW_CLASS = 'field-row';\nconst FIELD_CELL_CLASS = 'field-cell';\n\nconst FIELD_SIZE = 4;\nconst WIN_SCORE = 2048;\n\nclass BaseClass {\n  constructor() {\n    this.setSelectors();\n  }\n\n  setSelectors() {\n    this.fieldRows = document.getElementsByClassName(FIELD_ROW_CLASS);\n    this.buttonStart = document.querySelector('.start');\n    this.gameScore = document.querySelector('.game-score');\n    this.loseMessage = document.querySelector('.message-lose');\n    this.winMessage = document.querySelector('.message-win');\n    this.startMessage = document.querySelector('.message-start');\n  }\n\n  setInitData() {\n    this.score = 0;\n    this.isGameOver = false;\n    this.isGameStart = false;\n\n    this.fields = Array(FIELD_SIZE).fill([]).map(() => (\n      Array(FIELD_SIZE).fill(0)\n    ));\n\n    if (!this.loseMessage.classList.contains('hidden')) {\n      this.loseMessage.classList.add('hidden');\n    }\n\n    if (!this.winMessage.classList.contains('hidden')) {\n      this.winMessage.classList.add('hidden');\n    }\n  }\n\n  startGame() {\n    this.buttonStart.textContent = 'Restart';\n    this.buttonStart.classList.remove('start');\n    this.startMessage.classList.add('hidden');\n    this.buttonStart.classList.add('restart');\n\n    this.setRandomNumbers();\n    this.setRandomNumbers();\n    this.addKeydownListener();\n  }\n\n  restartGame() {\n    this.buttonStart.textContent = 'Start';\n    this.buttonStart.classList.remove('restart');\n    this.buttonStart.classList.add('start');\n    this.startMessage.classList.remove('hidden');\n\n    this.setInitData();\n\n    this.removeKeydownListener();\n  }\n\n  updateScore() {\n    this.gameScore.textContent = this.score;\n  }\n\n  updateCells() {\n    this.fields.forEach((row, rowIndex) => {\n      const fieldRows = this.fieldRows[rowIndex];\n\n      row.forEach((cell, cellIndex) => {\n        const cells\n          = fieldRows.getElementsByClassName(FIELD_CELL_CLASS)[cellIndex];\n\n        cells.className = FIELD_CELL_CLASS;\n        cells.textContent = cell || '';\n\n        if (cell) {\n          cells.classList.add(`${FIELD_CELL_CLASS}--${cell}`);\n        }\n      });\n    });\n  }\n\n  checkIfGameIsContinue() {\n    const gameIsContinue = this.fields.filter((row, rowIndex) => (\n      row.some((cell, cellIndex) => {\n        if (!cell) {\n          return false;\n        }\n\n        const isSameNextCell = cell === row[cellIndex + 1];\n        const nextRow = this.fields[rowIndex + 1];\n        const isSameCellNextRow = nextRow && cell === nextRow[cellIndex];\n\n        return isSameNextCell || isSameCellNextRow;\n      })\n    ));\n\n    return gameIsContinue.length;\n  }\n\n  checkIfGameIsOver() {\n    const freeRows = this.fields.filter((row) => row.some((cell) => !cell));\n    const winFieldsRow = this.fields.filter((row) => row.some((cell) => (\n      cell === WIN_SCORE\n    )));\n\n    if (winFieldsRow.length) {\n      this.winMessage.classList.remove('hidden');\n      this.isGameOver = true;\n    }\n\n    if (!freeRows.length && !this.checkIfGameIsContinue()) {\n      this.loseMessage.classList.remove('hidden');\n      this.isGameOver = true;\n    }\n  }\n\n  getRandomIndex() {\n    return Math.floor(Math.random() * FIELD_SIZE);\n  }\n\n  getRandomIndexes() {\n    const [rowIndex, cellIndex]\n      = [this.getRandomIndex(), this.getRandomIndex()];\n    const cellValue = this.fields[rowIndex][cellIndex];\n\n    const randomChance = Math.ceil(Math.random() * 10);\n\n    const newValue = randomChance === 1 ? 4 : 2;\n\n    if (cellValue) {\n      return this.getRandomIndexes();\n    } else {\n      return [rowIndex, cellIndex, newValue];\n    }\n  }\n\n  setRandomNumbers() {\n    const [rowIndex, cellIndex, newValue] = this.getRandomIndexes();\n\n    this.fields[rowIndex][cellIndex] = newValue;\n  }\n}\n\nclass Move extends BaseClass {\n  constructor() {\n    super();\n\n    this.isCellMoved = false;\n  }\n\n  setNewRowValues({ cell, rowIndex, cellIndex, prevCellIndex }) {\n    const value = cell * 2;\n\n    this.fields[rowIndex][prevCellIndex] = value;\n    this.fields[rowIndex][cellIndex] = 0;\n\n    this.score += value;\n  }\n\n  setNewColumnValues({ cell, columnIndex, prevColumnIndex, cellIndex }) {\n    const value = cell * 2;\n\n    this.fields[prevColumnIndex][cellIndex] = value;\n    this.fields[columnIndex][cellIndex] = 0;\n\n    this.score += value;\n  }\n\n  setPrevRowValues({ cell, rowIndex, cellIndex, index }) {\n    this.fields[rowIndex][index] = cell;\n\n    if (index !== cellIndex) {\n      this.fields[rowIndex][cellIndex] = 0;\n    }\n  }\n\n  setPrevColumnValues({ cell, columnIndex, cellIndex, index }) {\n    this.fields[index][cellIndex] = cell;\n\n    if (index !== columnIndex) {\n      this.fields[columnIndex][cellIndex] = 0;\n    }\n  }\n\n  goLeft() {\n    for (let rowIndex = 0; rowIndex < FIELD_SIZE; rowIndex++) {\n      let index = 0;\n\n      for (let cellIndex = 0; cellIndex < FIELD_SIZE; cellIndex++) {\n        const cell = this.fields[rowIndex][cellIndex];\n        const prevCell = this.fields[rowIndex][index - 1];\n\n        if (!cell) {\n          continue;\n        }\n\n        if (cell && index === cellIndex && prevCell !== cell) {\n          index++;\n          continue;\n        }\n\n        if (index && prevCell === cell) {\n          this.setNewRowValues({\n            cell, rowIndex, cellIndex, prevCellIndex: index - 1,\n          });\n        } else {\n          this.setPrevRowValues({\n            cell, rowIndex, cellIndex, index,\n          });\n          index++;\n        }\n\n        this.isCellMoved = true;\n      }\n    }\n  }\n\n  goRight() {\n    for (let rowIndex = FIELD_SIZE - 1; rowIndex >= 0; rowIndex--) {\n      let index = FIELD_SIZE - 1;\n\n      for (let cellIndex = FIELD_SIZE - 1; cellIndex >= 0; cellIndex--) {\n        const cell = this.fields[rowIndex][cellIndex];\n        const prevCell = this.fields[rowIndex][index + 1];\n\n        if (!cell) {\n          continue;\n        }\n\n        if (cell && index === cellIndex && prevCell !== cell) {\n          index--;\n          continue;\n        }\n\n        if (index !== FIELD_SIZE - 1 && prevCell === cell) {\n          this.setNewRowValues({\n            cell, rowIndex, cellIndex, prevCellIndex: index + 1,\n          });\n        } else {\n          this.setPrevRowValues({\n            cell, rowIndex, cellIndex, index,\n          });\n          index--;\n        }\n\n        this.isCellMoved = true;\n      }\n    }\n  }\n\n  goUp() {\n    for (let cellIndex = 0; cellIndex < FIELD_SIZE; cellIndex++) {\n      let index = 0;\n\n      for (let columnIndex = 0; columnIndex < FIELD_SIZE; columnIndex++) {\n        const cell = this.fields[columnIndex][cellIndex];\n        const prevCell = index ? this.fields[index - 1][cellIndex] : null;\n\n        if (!cell) {\n          continue;\n        }\n\n        if (cell && index === columnIndex && prevCell !== cell) {\n          index++;\n          continue;\n        }\n\n        if (index && prevCell === cell) {\n          this.setNewColumnValues({\n            cell, columnIndex, prevColumnIndex: index - 1, cellIndex,\n          });\n        } else {\n          this.setPrevColumnValues({\n            cell, columnIndex, cellIndex, index,\n          });\n          index++;\n        }\n\n        this.isCellMoved = true;\n      }\n    }\n  }\n\n  goDown() {\n    for (let cellIndex = FIELD_SIZE - 1; cellIndex >= 0; cellIndex--) {\n      let index = FIELD_SIZE - 1;\n\n      for (let columnIndex = FIELD_SIZE - 1; columnIndex >= 0; columnIndex--) {\n        const cell = this.fields[columnIndex][cellIndex];\n        const prevCell\n          = index !== FIELD_SIZE - 1 ? this.fields[index + 1][cellIndex] : null;\n\n        if (!cell) {\n          continue;\n        }\n\n        if (cell && index === columnIndex && prevCell !== cell) {\n          index--;\n          continue;\n        }\n\n        if (index !== FIELD_SIZE - 1 && prevCell === cell) {\n          this.setNewColumnValues({\n            cell, columnIndex, prevColumnIndex: index + 1, cellIndex,\n          });\n        } else {\n          this.setPrevColumnValues({\n            cell, columnIndex, cellIndex, index,\n          });\n          index -= 1;\n        }\n\n        this.isCellMoved = true;\n      }\n    }\n  }\n}\n\nclass Game extends Move {\n  constructor() {\n    super();\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n    this.handleKeydown = this.handleKeydown.bind(this);\n  }\n\n  init() {\n    this.setInitData();\n    this.buttonStart.addEventListener('click', this.handleButtonClick);\n  }\n\n  handleKeydown({ key }) {\n    this.isCellMoved = false;\n\n    switch (key) {\n      case 'ArrowDown':\n        this.goDown();\n        break;\n\n      case 'ArrowLeft':\n        this.goLeft();\n        break;\n\n      case 'ArrowUp':\n        this.goUp();\n        break;\n\n      case 'ArrowRight':\n        this.goRight();\n        break;\n\n      default:\n        return;\n    }\n\n    if (!this.isGameOver && this.isCellMoved) {\n      this.setRandomNumbers();\n      this.updateCells();\n      this.updateScore();\n    }\n\n    this.checkIfGameIsOver();\n  }\n\n  addKeydownListener() {\n    document.addEventListener('keydown', this.handleKeydown);\n  }\n\n  removeKeydownListener() {\n    document.removeEventListener('keydown', this.handleKeydown);\n  }\n\n  handleButtonClick() {\n    this.restartGame();\n    this.updateScore();\n    this.startGame();\n    this.updateCells();\n  }\n}\n\nconst newGame = new Game();\n\nnewGame.init();\n"]}